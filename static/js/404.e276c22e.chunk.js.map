{"version":3,"file":"static/js/404.e276c22e.chunk.js","mappings":"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","sources":["components/ContactsArea/ContactsArea.styled.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Loader/Loader.styled.js","components/Loader/Loader.js","components/ContactList/ContactList.styled.js","components/ContactListElement/ContactListElement.styled.js","components/ContactListElement/ContactListElement.js","components/ContactList/ContactList.js","components/ContactsArea/ContactsArea.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/UserMenu/UserMenu.styled.js","components/UserMenu/UserMenu.js","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledContactsArea = styled.div`\n  margin: auto auto 50px auto;\n  max-width: 40%;\n  min-width: 210px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  background-color: #e8e8e8;\n  overflow: hidden;\n  border-radius: 12px;\n  box-shadow: 7px 7px 10px 3px #24004628;\n  color: #240046;\n  font-weight: 500;\n  align-items: center;\n  padding-bottom: 20px;\n  @media (max-width: 765px) {\n    max-width: 90%;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const StyledFilterArea = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: left;\n  max-width: 50%;\n  margin: 10px 0px;\n`;\n\nexport const StyledLabel = styled.label`\n  margin: 0px 0px 10px 0px;\n  display: block;\n`;\n\nexport const StyledFilterInput = styled.input`\n  margin: 0px;\n`;\n","import React from 'react';\nimport {\n  StyledFilterArea,\n  StyledLabel,\n  StyledFilterInput,\n} from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const onFilter = event => {\n    const newFilterValue = event.target.value;\n    dispatch(setFilter(newFilterValue));\n  };\n  return (\n    <StyledFilterArea>\n      <StyledLabel htmlFor=\"filterInput\">Find contacts by name</StyledLabel>\n      <StyledFilterInput\n        onChange={onFilter}\n        id=\"filterInput\"\n        type=\"text\"\n        name=\"filter\"\n      ></StyledFilterInput>\n    </StyledFilterArea>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledLoader = styled.div`\n  --height-of-loader: 4px;\n  --loader-color: #0071e2;\n  width: 30%;\n  height: var(--height-of-loader);\n  border-radius: 30px;\n  background-color: rgba(0, 0, 0, 0.2);\n  position: relative;\n  &::before {\n    content: '';\n    position: absolute;\n    background: var(--loader-color);\n    top: 0;\n    left: 0;\n    width: 0%;\n    height: 100%;\n    border-radius: 30px;\n    animation: moving 1s ease-in-out infinite;\n  }\n  @keyframes moving {\n    50% {\n      width: 100%;\n    }\n\n    100% {\n      width: 0;\n      right: 0;\n      left: unset;\n    }\n  }\n`;\n\nexport const EmptyDiv = styled.div`\n  height: 4px;\n`;\n","import { StyledLoader, EmptyDiv } from './Loader.styled.js';\nimport { getIsLoadingContacts } from 'redux/contacts/selectors.js';\nimport { useSelector } from 'react-redux';\n\nexport const Loader = () => {\n  const isLoading = useSelector(getIsLoadingContacts);\n  if (isLoading) {\n    return <StyledLoader />;\n  } else {\n    return <EmptyDiv />;\n  }\n};\n","import styled from 'styled-components';\n\nexport const StyledContactList = styled.ul`\n  padding: 0px 25px 0px 0px;\n  max-width: 100%;\n  margin: 0px 15px;\n  text-align: left;\n  list-style-position: inside;\n  position: relative;\n`;\n","import styled from 'styled-components';\n\nexport const StyledLI = styled.li`\n  margin-top: 10px;\n`;\n\nexport const StyledDeleteButton = styled.button`\n  position: absolute;\n  right: 0;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  background: red;\n  border: none;\n  border-radius: 5px;\n  box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.15);\n  background: #e62222;\n  transition: 200ms;\n  aspect-ratio: 1;\n  &:hover {\n    background: #ff3636;\n  }\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const StyledSVG = styled.svg`\n  fill: #ffffff;\n`;\n","import React from 'react';\nimport {\n  StyledDeleteButton,\n  StyledSVG,\n  StyledLI,\n} from './ContactListElement.styled';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectIsLoggedIn } from 'redux/auth/selectors';\nimport { deleteContactFromStorage } from 'redux/contacts/contactsSlice';\n\nexport const ContactListElement = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const onDeleteContact = () => {\n    if (isLoggedIn) {\n      dispatch(deleteContact(id));\n    } else {\n      dispatch(deleteContactFromStorage(id));\n    }\n  };\n  return (\n    <StyledLI>\n      <span id=\"name\">{name}</span>: {number}\n      <StyledDeleteButton\n        onClick={() => {\n          onDeleteContact(id);\n        }}\n        type=\"button\"\n      >\n        <span>\n          <StyledSVG\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"10\"\n            height=\"10\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path d=\"M24 20.188l-8.315-8.209 8.2-8.282-3.697-3.697-8.212 8.318-8.31-8.203-3.666 3.666 8.321 8.24-8.206 8.313 3.666 3.666 8.237-8.318 8.285 8.203z\"></path>\n          </StyledSVG>\n        </span>\n      </StyledDeleteButton>\n    </StyledLI>\n  );\n};\nContactListElement.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  id: PropTypes.string,\n};\n","import React from 'react';\nimport { StyledContactList } from './ContactList.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ContactListElement } from 'components/ContactListElement/ContactListElement';\nimport { getFilteredAndSortedContacts } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\nimport { selectIsLoggedIn } from 'redux/auth/selectors';\n\nexport const ContactList = () => {\n  const filteredAndSortedContacts = useSelector(getFilteredAndSortedContacts);\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  useEffect(() => {\n    if (isLoggedIn) {\n      dispatch(fetchContacts());\n    }\n  }, [dispatch, isLoggedIn]);\n  return (\n    <StyledContactList id=\"contactsList\">\n      {filteredAndSortedContacts.map(contact => (\n        <ContactListElement\n          key={contact.id}\n          id={contact.id}\n          name={contact.name}\n          number={contact.number}\n        />\n      ))}\n    </StyledContactList>\n  );\n};\n","import { StyledContactsArea } from './ContactsArea.styled';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nexport const ContactsArea = () => {\n  return (\n    <>\n      <h2>Contacts</h2>\n      <StyledContactsArea>\n        <Filter />\n        <Loader />\n        <ContactList />\n      </StyledContactsArea>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledInputArea = styled.div`\n  margin: auto;\n  max-width: 40%;\n  min-width: 210px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  background-color: #240046;\n  max-height: 420px;\n  overflow: hidden;\n  border-radius: 12px;\n  box-shadow: 7px 7px 10px 3px #24004628;\n  @media (max-width: 765px) {\n    max-width: 90%;\n  }\n`;\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  padding: 24px;\n`;\n\nexport const StyledInput = styled.input`\n  display: block;\n  margin: auto;\n  max-width: 80%;\n`;\n\nexport const StyledLabel = styled.label`\n  margin: auto;\n  display: block;\n  font-weight: 500;\n  color: #ffffff;\n`;\n\nexport const StyledAddButton = styled.button`\n  margin: auto;\n  height: 40px;\n  color: #fff;\n  background: #573b8a;\n  font-size: 1rem;\n  font-weight: bold;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: 0.2s ease-in;\n  padding: 0px 30px 0px 30px;\n  &:hover {\n    cursor: pointer;\n    background-color: #6d44b8;\n  }\n`;\n\nexport const StyledHeading = styled.h1`\n  @media (max-width: 670px) {\n    margin-top: 70px;\n  }\n`;\n","import React from 'react';\nimport {\n  StyledInputArea,\n  StyledForm,\n  StyledInput,\n  StyledLabel,\n  StyledAddButton,\n  StyledHeading,\n} from './ContactForm.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { addContactToStorage } from 'redux/contacts/contactsSlice';\nimport { selectIsLoggedIn } from 'redux/auth/selectors';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const dispatch = useDispatch();\n  const onSubmit = async event => {\n    event.preventDefault();\n    const form = event.target;\n    const contactName = form.elements.name.value;\n    const contactNumber = form.elements.number.value;\n    if (contacts.map(contact => contact.name).includes(contactName)) {\n      window.alert(`${contactName} is already in contacts!`);\n    } else {\n      if (isLoggedIn) {\n        dispatch(addContact({ name: contactName, number: contactNumber }));\n      } else {\n        dispatch(addContactToStorage(contactName, contactNumber));\n      }\n    }\n    form.reset();\n    document.querySelector('input#nameInput').focus();\n  };\n  return (\n    <>\n      <StyledHeading>Phonebook</StyledHeading>\n      <StyledInputArea>\n        <StyledForm onSubmit={onSubmit}>\n          <StyledLabel htmlFor=\"nameInput\">Name</StyledLabel>\n          <StyledInput\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            id=\"nameInput\"\n          />\n          <StyledLabel htmlFor=\"phoneInput\">Phone number</StyledLabel>\n          <StyledInput\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            id=\"phoneInput\"\n          />\n          <StyledAddButton type=\"submit\">Add contact</StyledAddButton>\n        </StyledForm>\n      </StyledInputArea>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledUserMenu = styled.div`\n  position: absolute;\n  right: 5px;\n  background-color: rgb(36, 0, 70);\n  border-radius: 12px;\n  box-shadow: rgba(36, 0, 70, 0.157) 3.5px 3.5px 5px 3px;\n  padding: 0px 20px;\n  top: 50px;\n`;\n\nexport const StyledGreeting = styled.p`\n  font-weight: 500;\n  color: #ffffff;\n`;\n","import React from 'react';\nimport { StyledUserMenu, StyledGreeting } from './UserMenu.styled';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from 'redux/auth/selectors';\n\nexport const UserMenu = () => {\n  const user = useSelector(selectUser);\n  const userEmail = user.email;\n  return (\n    <StyledUserMenu>\n      <StyledGreeting>Hello {userEmail}!</StyledGreeting>\n    </StyledUserMenu>\n  );\n};\n","import React from 'react';\nimport { ContactsArea } from 'components/ContactsArea/ContactsArea';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { UserMenu } from 'components/UserMenu/UserMenu';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from 'redux/auth/selectors';\n\nexport default function ContactsPage() {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  return (\n    <>\n      {isLoggedIn && <UserMenu />}\n      <ContactForm />\n      <ContactsArea />\n    </>\n  );\n}\n"],"names":["StyledContactsArea","styled","StyledFilterArea","StyledLabel","StyledFilterInput","Filter","dispatch","useDispatch","htmlFor","onChange","event","newFilterValue","target","value","setFilter","id","type","name","StyledLoader","EmptyDiv","Loader","useSelector","getIsLoadingContacts","StyledContactList","StyledLI","StyledDeleteButton","StyledSVG","ContactListElement","number","isLoggedIn","selectIsLoggedIn","onClick","deleteContact","deleteContactFromStorage","xmlns","width","height","viewBox","d","ContactList","filteredAndSortedContacts","getFilteredAndSortedContacts","useEffect","fetchContacts","map","contact","ContactsArea","StyledInputArea","StyledForm","StyledInput","StyledAddButton","StyledHeading","ContactForm","contacts","getContacts","onSubmit","preventDefault","form","contactName","elements","contactNumber","includes","window","alert","addContact","addContactToStorage","reset","document","querySelector","focus","pattern","title","required","StyledUserMenu","StyledGreeting","UserMenu","userEmail","selectUser","email","ContactsPage"],"sourceRoot":""}